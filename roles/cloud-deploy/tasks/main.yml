---
# Global tasks
- name: Generate cloud node names
  ansible.builtin.set_fact:
    cloud_node_names: "{{ cloud_node_names | default([]) + [cloud_node_name_template | format(item | int)] }}"
  with_sequence: start=1 end={{ cloud_instance_count | int }}

- name: Print list of node names we are about to provision
  ansible.builtin.debug:
    msg:
      - "We'll deploy the following nodes:"
      - "{{ cloud_node_names }}"

- name: Print ssh key
  debug:
    msg: "{{ public_ssh_key }}"
  run_once: true

# DigitalOcean specific for now...
- name: Collect list of DigitalOcean public SSH keys
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_sshkey_info:
    oauth_token: '{{ do_api_token }}'
  register: ssh_keys
  run_once: true

- name: Build an array with the correct SSH key ID
  no_log: true
  delegate_to: 127.0.0.1
  ansible.builtin.set_fact:
    ssh_key_id_array: "[ '{{ item.id }}' ]"
  when: item.public_key|trim == public_ssh_key|trim
  loop: "{{ ssh_keys.data | flatten ( levels=1 ) }}"
  run_once: true

- name: Spawn a new Digital Ocean Droplet for each node, collect the IPv4+IPv6 addresses
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_droplet:
    state: present
    name: "{{ item }}"
    oauth_token: '{{ do_api_token }}'
    size: '{{ do_size }}'
    ssh_keys: '{{ ssh_key_id_array }}'
    region: '{{ do_region }}'
    image: '{{ do_image }}'
    ipv6: true
    wait: true
    unique_name: true
    tags: "bacalhau_bacboot"
  with_items: "{{ cloud_node_names }}"
  register: new_server_info
  changed_when: true
  # Wait for up to 300 seconds for droplets, then fail
  async: 300
  # Fire and forget. We'll check the status later.
  poll: 0

- name: Wait for the droplet creation to complete
  delegate_to: 127.0.0.1
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  with_items: "{{ new_server_info.results }}"
  register: droplet_completion
  until: droplet_completion.finished
  retries: 30
  delay: 10

- name: Group hosts by droplet IDs
  delegate_to: localhost
  run_once: true
  no_log: true
  vars:
    droplet_ids: "{{ droplet_completion.results | map(attribute='data.droplet.id') | list }}"
  ansible.builtin.add_host:
    name: "{{ item.data.droplet.name }}"
    ansible_host: "{{ (item.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public') | list | first).ip_address }}"
    droplet_id: "{{ item.data.droplet.id }}"
    groups:
      - "droplet_ids_{{ item.data.droplet.id }}"
      - "bacalhau_node"
      - "bacalhau_client"
  loop: "{{ droplet_completion.results }}"
  register: add_host_result

- name: Print list of all hosts and their ipv4 address
  ansible.builtin.debug:
    msg: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
  with_items: "{{ groups['all'] | difference(['localhost']) }}"

- name: Collect the host keys using ssh-keyscan
  ansible.builtin.command: "ssh-keyscan {{ hostvars[item]['ansible_host'] }}"
  register: host_keys_result
  with_items: "{{ groups['bacalhau_node'] }}"
  changed_when: false
  async: 120 # Set the maximum allowed runtime, in seconds
  poll: 0 # Fire and forget, don't wait for the task to complete

- name: Wait for all ssh-keyscan tasks to complete
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ host_keys_result.results }}"
  when: item.ansible_job_id is not none
  register: keyscan_results
  until: keyscan_results.finished
  retries: 30
  delay: 5

- name: Add the host keys to the known_hosts file
  ansible.builtin.known_hosts:
    name: "{{ hostvars[item]['ansible_host'] }}"
    key: "{{ keyscan_results.results | map(attribute='stdout') | join('\n') }}"
    path: "{{ lookup('env', 'HOME') }}/.ssh/known_hosts"
    state: present
  with_items: "{{ groups['bacalhau_node'] }}"