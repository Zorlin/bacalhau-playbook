---
# Global tasks
- name: Set region based on chosen cloud provider
  ansible.builtin.set_fact:
    cloud_node_region: "{{ vars[cloud_provider + '_region'] }}"

- name: Generate cloud node names
  ansible.builtin.set_fact:
    cloud_node_names: "{{ cloud_node_names | default([]) + [cloud_node_name_template | format(item)] }}"
  with_sequence: start=1 end={{ cloud_instance_count }}

# DigitalOcean specific for now...
- name: Collect list of DigitalOcean public SSH keys
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_sshkey_info:
    oauth_token: '{{ do_api_token }}'
  register: ssh_keys
  run_once: true

- name: Build an array with the correct SSH key ID
  delegate_to: 127.0.0.1
  ansible.builtin.set_fact:
    ssh_key_id_array: "[ '{{ item.id }}' ]"
  when: item.public_key == public_ssh_key
  loop: "{{ ssh_keys.data | flatten ( levels=1 ) }}"
  run_once: true

- name: DEBUG - print cloud node names
  ansible.builtin.debug:
    msg: "{{ cloud_node_names }}"

- name: Spawn a new Digital Ocean Droplet for each node, collect the IPv4+IPv6 addresses
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_droplet:
    state: present
    name: "{{ item }}"
    oauth_token: '{{ do_api_token }}'
    size: '{{ slug_size }}'
    ssh_keys: '{{ ssh_key_id_array }}'
    region: '{{ do_droplet_region }}'
    image: '{{ do_image }}'
    ipv6: true
    wait: true
    unique_name: true
    tags: "bacalhau_bacboot"
  with_items: "{{ cloud_node_names }}"
  register: new_server_info
