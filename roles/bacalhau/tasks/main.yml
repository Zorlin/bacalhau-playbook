---
- name: Detect whether we are on Linux or macOS, and safely exit if we are not.
  ansible.builtin.set_fact:
    bacalhau_os: "{{ ansible_os_family }}"
  when: ansible_os_family == "Debian" or ansible_os_family == "Darwin" # TODO: or ansible_os_family == "RedHat" or ansible_os_family == "Suse"
  failed_when: false

- name: Cast bacalhau_os into just "linux" or "darwin"
  ansible.builtin.set_fact:
    bacalhau_os: "{{ 'linux' if bacalhau_os == 'Debian' else 'darwin' }}"
  when: bacalhau_os == "Debian" or bacalhau_os == "Darwin"

- name: Print arch
  ansible.builtin.debug:
    msg: "{{ ansible_architecture }}"

- name: Cast ansible_architecture into just "arm64" or "amd64"
  ansible.builtin.set_fact:
    bacalhau_arch: "{{ 'arm64' if ansible_architecture == 'arm64' or 'aarch64' else 'amd64' }}"
  when: ansible_architecture == "aarch64" or ansible_architecture == "arm64" or ansible_architecture == "x86_64"

# Try running Bacalhau first, to see what version it is.
- name: Check bacalhau version
  ansible.builtin.command: /usr/local/bin/bacalhau version
  register: existing_bacalhau_version
  ignore_errors: true
  changed_when: false
  no_log: true
  check_mode: false

- name: Poll the GitHub api to find the latest release of bacalhau and store it in a variable
  ansible.builtin.uri:
    url: https://api.github.com/repos/bacalhau-project/bacalhau/releases/latest
    return_content: true
  register: json_reponse
  when: bacalhau_version == 'latest'
  check_mode: false

- name: Set latest version number based on what we just fetched
  ansible.builtin.set_fact:
    bacalhau_version: "{{ json_reponse.json.tag_name }}"
  when: bacalhau_version == 'latest'

# Compare the latest version of bacalhau with the version that is already installed, if any.
- name: Install or update bacalhau
  when:
    "(existing_bacalhau_version.stdout == '') or (existing_bacalhau_version.stdout_lines[0].split(': ')[1] != bacalhau_version)"
  block:
    - name: Download the latest release of bacalhau to /tmp/
      ansible.builtin.get_url:
        url: https://github.com/bacalhau-project/bacalhau/releases/download/{{ bacalhau_version }}/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz # noqa yaml[line-length]
        dest: /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz
        mode: "0644"

    - name: Download the corresponding sha256 hash to /tmp/
      ansible.builtin.get_url:
        url: https://github.com/bacalhau-project/bacalhau/releases/download/{{ bacalhau_version }}/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz.signature.sha256 # noqa yaml[line-length]
        dest: /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz.signature.sha256
        mode: "0644"

    - name: Decode the sha256 signature using openssl and save it with the same name
      ansible.builtin.command:
        cmd: openssl base64 -d -in /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz.signature.sha256 -out /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz.signature.sha256.decoded # noqa yaml[line-length]
        creates: /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz.signature.sha256.decoded

    # do this all as a block task that only runs if gpg_validate is true
    - name: Validate the integrity of the downloaded tarball
      block:
        - name: Create a temporary directory that we'll use to validate that the bacalhau binary is valid
          ansible.builtin.tempfile:
            state: directory
          register: tempdir

        - name: Write the bacalhau_public_key variable to a file
          ansible.builtin.copy:
            content: "{{ bacalhau_public_key }}"
            dest: /tmp/bacalhau_public_key.pem
            mode: "0644"

        - name: Validate the tarball by checking it against the OpenSSL public key and signature.sha256 file
          ansible.builtin.command:
            cmd: openssl dgst -sha256 -verify /tmp/bacalhau_public_key.pem -signature /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz.signature.sha256.decoded /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz # noqa yaml[line-length]
          register: openssl_validation
          changed_when: false

    - name: Install the bacalhau binary by extracting it to /usr/local/bin from the archive
      ansible.builtin.command:
        cmd: tar -xzf /tmp/bacalhau_{{ bacalhau_version }}_{{ bacalhau_os }}_{{ bacalhau_arch }}.tar.gz -C /usr/local/bin/ bacalhau # noqa command-instead-of-module yaml[line-length] no-changed-when

- name: Ensure that the bacalhau binary is executable
  ansible.builtin.file:
    path: "{{ bacalhau_install_dir }}/bacalhau"
    mode: "0755"

- name: Run a test command
  ansible.builtin.command:
    cmd: "{{ bacalhau_install_dir }}/bacalhau version"
  register: bacalhau_version_output
  changed_when: false

- name: Report that we installed Bacalhau successfully
  ansible.builtin.debug:
    msg:
      - "Bacalhau was installed successfully."
      - "To get started with Bacalhau, please visit https://github.com/{{ bacalhau_org }}/{{ bacalhau_repo }}!"
  failed_when: not (bacalhau_version_output.rc == 0 and bacalhau_version in bacalhau_version_output.stdout)
