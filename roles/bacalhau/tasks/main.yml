---

# # figure out what we're running on and which arch - ansible will do this for us, we'll just assume we need sudo unless the user says false and uses a good path
# # TODO report an early error if they're using the default /usr/local/bin path or /usr/bin and have use_sudo set to false to save them time.
# #getSystemInfo

# use ansible to detect whether we are on Linux or macOS, die if we are not on either separately, die if we are not on Ubuntu or Debian
- name: use ansible to detect whether we are on Linux or macOS, die if we are not on either separately, die if we are not on Ubuntu or Debian
  ansible.builtin.set_fact:
    bacalhau_os: "{{ ansible_os_family }}"
  when: ansible_os_family == "Debian" or ansible_os_family == "MacOSX" # later or ansible_os_family == "RedHat" or ansible_os_family == "Suse" 
  failed_when: true

# # verify we're running on a supported system
# verifySupported

# # check if bacalhau is already installed - we won't do this in Ansible since this playbook will be idempotent anyway so it's pointless
# #checkExistingBacalhau

# # nope
# #checkHttpRequestCLI

# # get latest release
# getLatestRelease

# # install it
# echo "Installing $ret_val BACALHAU CLI..."

# # set up a temp dir - this is gonna spawn an idempotency bug for us ;)
# #setup_tmp

# # download, unpack, expand, verify, then install
# downloadFile "$ret_val"
# verifyTarBall
# expandTarball
# verifyBin

# # move the file out of the tempdir and then 
# installFile
# cleanup
# # install it

# # report to the user that we won this battle
# installCompleted

# getSystemInfo() {
#     ARCH=$(uname -m)
#     case $ARCH in
#         armv7*) ARCH="arm" ;;
#         aarch64) ARCH="arm64" ;;
#         x86_64) ARCH="amd64" ;;
#     esac

#     OS=$(eval "echo $(uname)|tr '[:upper:]' '[:lower:]'")

#     # Most linux distro needs root permission to copy the file to /usr/local/bin
#     if [ "$OS" == "linux" ] && [ "$BACALHAU_INSTALL_DIR" == "/usr/local/bin" ]; then
#         USE_SUDO="true"
#     # Darwin needs permission to copy the file to /usr/local/bin
#     elif [ "$OS" == "darwin" ] && [ "$BACALHAU_INSTALL_DIR" == "/usr/local/bin" ]; then
#         USE_SUDO="true"
#     fi
# }

# verifySupported() {
#     local supported=(linux-amd64 linux-arm64 darwin-amd64 darwin-arm64)
#     local current_osarch="${OS}-${ARCH}"

#     for osarch in "${supported[@]}"; do
#         if [ "$osarch" == "$current_osarch" ]; then
#             echo "Your system is ${OS}_${ARCH}"
#             return
#         fi
#     done

#     echo "No prebuilt binary for ${current_osarch}"
#     exit 1
# }

# runAsRoot() {
#     local CMD="$*"

#     if [ $EUID -ne 0 ] && [ $USE_SUDO = "true" ]; then
#         CMD="sudo $CMD"
#     fi

#     $CMD
# }

# checkHttpRequestCLI() {
#     if type "curl" > /dev/null; then
#         BACALHAU_HTTP_REQUEST_CLI=curl
#     elif type "wget" > /dev/null; then
#         BACALHAU_HTTP_REQUEST_CLI=wget
#     else
#         echo "Either curl or wget is required"
#         exit 1
#     fi
# }

# checkExistingBacalhau() {
#     if [ -f "$BACALHAU_CLI_FILE" ]; then
#         echo -e "\nBACALHAU CLI is detected:"
#         $BACALHAU_CLI_FILE version
#         echo -e "Reinstalling BACALHAU CLI - ${BACALHAU_CLI_FILE}..."
#     else
#         echo -e "No BACALHAU detected. Installing fresh BACALHAU CLI..."
#     fi
# }

# getLatestRelease() {
#     # /latest ignores pre-releases, see https://docs.github.com/en/rest/releases/releases#get-the-latest-release
#     if [ "$PRE_RELEASE" == "true" ]; then
#         echo "Installing most recent pre-release version..."
#         local bacalhauReleaseUrl="https://api.github.com/repos/${GITHUB_ORG}/${GITHUB_REPO}/releases"
#     else
#         local bacalhauReleaseUrl="https://api.github.com/repos/${GITHUB_ORG}/${GITHUB_REPO}/releases/latest"
#     fi
#     local latest_release=""

#     if [ "$BACALHAU_HTTP_REQUEST_CLI" == "curl" ]; then
#         latest_release=$(curl -s $bacalhauReleaseUrl  | grep \"tag_name\" | grep -E -i '"v[0-9]+\.[0-9]+\.[0-9]+"' | grep -v rc | awk 'NR==1{print $2}' | sed -n 's/\"\(.*\)\",/\1/p')
#     else
#         latest_release=$(wget -q --header="Accept: application/json" -O - $bacalhauReleaseUrl | grep \"tag_name\" | grep -E -i '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v rc | awk 'NR==1{print $2}' |  sed -n 's/\"\(.*\)\",/\1/p')
#     fi

#     ret_val=$latest_release
# }
# # --- create temporary directory and cleanup when done ---
# setup_tmp() {
#     BACALHAU_TMP_ROOT=$(mktemp -d 2>/dev/null || mktemp -d -t 'bacalhau-install.XXXXXXXXXX')
#     cleanup() {
#         code=$?
#         set +e
#         trap - EXIT
#         rm -rf "${BACALHAU_TMP_ROOT}"
#         exit $code
#     }
#     trap cleanup INT EXIT
# }

# downloadFile() {
#     LATEST_RELEASE_TAG=$1

#     BACALHAU_CLI_ARTIFACT="${BACALHAU_CLI_FILENAME}_${LATEST_RELEASE_TAG}_${OS}_${ARCH}.tar.gz"
#     BACALHAU_SIG_ARTIFACT="${BACALHAU_CLI_ARTIFACT}.signature.sha256"

#     DOWNLOAD_BASE="https://github.com/${GITHUB_ORG}/${GITHUB_REPO}/releases/download"

#     CLI_DOWNLOAD_URL="${DOWNLOAD_BASE}/${LATEST_RELEASE_TAG}/${BACALHAU_CLI_ARTIFACT}"
#     SIG_DOWNLOAD_URL="${DOWNLOAD_BASE}/${LATEST_RELEASE_TAG}/${BACALHAU_SIG_ARTIFACT}"

#     CLI_TMP_FILE="$BACALHAU_TMP_ROOT/$BACALHAU_CLI_ARTIFACT"
#     SIG_TMP_FILE="$BACALHAU_TMP_ROOT/$BACALHAU_SIG_ARTIFACT"

#     echo "Downloading $CLI_DOWNLOAD_URL ..."
#     if [ "$BACALHAU_HTTP_REQUEST_CLI" == "curl" ]; then
#         curl -SsLN "$CLI_DOWNLOAD_URL" -o "$CLI_TMP_FILE"
#     else
#         wget -q -O "$CLI_TMP_FILE" "$CLI_DOWNLOAD_URL"
#     fi

#     if [ ! -f "$CLI_TMP_FILE" ]; then
#         echo "failed to download $CLI_DOWNLOAD_URL ..."
#         exit 1
#     fi

#     echo "Downloading sig file $SIG_DOWNLOAD_URL ..."
#     if [ "$BACALHAU_HTTP_REQUEST_CLI" == "curl" ]; then
#         curl -SsLN "$SIG_DOWNLOAD_URL" -o "$SIG_TMP_FILE"
#     else
#         wget -q -O "$SIG_TMP_FILE" "$SIG_DOWNLOAD_URL"
#     fi

#     if [ ! -f "$SIG_TMP_FILE" ]; then
#         echo "failed to download $SIG_DOWNLOAD_URL ..."
#         exit 1
#     fi

# }

# verifyTarBall() {
#     # echo "ROOT: $BACALHAU_TMP_ROOT"
#     # echo "Public Key: $BACALHAU_PUBLIC_KEY"
#     echo "$BACALHAU_PUBLIC_KEY" > "$BACALHAU_TMP_ROOT/BACALHAU_public_file.pem"
#     openssl base64 -d -in "$SIG_TMP_FILE" -out "$SIG_TMP_FILE".decoded
#     if openssl dgst -sha256 -verify "$BACALHAU_TMP_ROOT/BACALHAU_public_file.pem" -signature "$SIG_TMP_FILE".decoded "$CLI_TMP_FILE" ; then
#         # Above command echos "Verified Ok"
#         return
#     else
#         echo "Failed to verify signature of tarball."
#         exit 1
#     fi
# }

# expandTarball() {
#     echo "Extracting tarball ..."
#     # echo "Extract tar file - $CLI_TMP_FILE to $BACALHAU_TMP_ROOT"
#     tar xzf "$CLI_TMP_FILE" -C "$BACALHAU_TMP_ROOT"
# }

# verifyBin() {
#     # openssl base64 -d -in $BACALHAU_TMP_ROOT/bacalhau.signature.sha256 -out $BACALHAU_TMP_ROOT/bacalhau.signature.sha256.decoded
#     # if openssl dgst -sha256 -verify "$BACALHAU_TMP_ROOT/BACALHAU_public_file.pem" -signature $BACALHAU_TMP_ROOT/bacalhau.signature.sha256.decoded $BACALHAU_TMP_ROOT/bacalhau; then
#     #     return
#     # else
#     #     echo "Failed to verify signature of bacalhau binary."
#     #     exit 1
#     # fi
#     echo "NOT verifying Bin"
# }


# installFile() {
#     local tmp_root_bacalhau_cli="$BACALHAU_TMP_ROOT/$BACALHAU_CLI_FILENAME"

#     if [ ! -f "$tmp_root_bacalhau_cli" ]; then
#         echo "Failed to unpack BACALHAU CLI executable."
#         exit 1
#     fi

#     chmod o+x "$tmp_root_bacalhau_cli"
#     if [ -f "$BACALHAU_INSTALL_DIR/$BACALHAU_CLI_FILENAME" ]; then
#         runAsRoot rm -f "$BACALHAU_INSTALL_DIR/$BACALHAU_CLI_FILENAME"
#     fi
#     runAsRoot cp "$tmp_root_bacalhau_cli" "$BACALHAU_INSTALL_DIR"

#     if [ -f "$BACALHAU_CLI_FILE" ]; then
#         echo "$BACALHAU_CLI_FILENAME installed into $BACALHAU_INSTALL_DIR successfully."

#         $BACALHAU_CLI_FILE version
#     else
#         echo "Failed to install $BACALHAU_CLI_FILENAME"
#         exit 1
#     fi
# }

# fail_trap() {
#     result=$?
#     if [ "$result" != "0" ]; then
#         echo "Failed to install BACALHAU CLI"
#         echo "For support, go to https://github.com/${GITHUB_ORG}/${GITHUB_REPO}"
#     fi
#     cleanup
#     exit $result
# }

# cleanup() {
#     if [[ -d "${BACALHAU_TMP_ROOT:-}" ]]; then
#         rm -rf "$BACALHAU_TMP_ROOT"
#     fi
# }

# installCompleted() {
#     echo -e "\nTo get started with BACALHAU, please visit https://github.com/${GITHUB_ORG}/${GITHUB_REPO}"
# }

